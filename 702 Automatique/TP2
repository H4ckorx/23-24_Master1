# -*- coding: utf-8 -*-
"""
editor : zeyu.yin@etu.umontpellier.fr

TP 2 - Automatique

11/10/2023

M1 EEA Groupe C
"""

import numpy as np
import matplotlib.pyplot as plt
from control.matlab import *
from scipy import signal
import control as ctrl

"""
Partie 2
"""
#Q1:Que valent les matrices C et D ?
R = 1
L = 4e-3
Ke = 0.1
Km = 0.1
fv = 3e-3
J = 2e-3

A = np.array([[-R/L,-Ke/L,0],[Km/J,-fv/J,0],[0,1,0]])

B = np.array([[1/L],[0],[0]])

C = np.array([[0, 0, 1]])
              
D = np.array([[0]])


"""
Q2,Q3 et Q4:
    Ce systeme n'est pas stable parcequ'il y a un pole p1=0
"""
print("---------------------------------------------------------")
print("\n")
print("Question2,3 et 4 : \n")
#Fonction de MCC
def MCC():



    
    sys_ss = ss(A,B,C,D)
    sys_tf = ss2tf(sys_ss)
    print("La fonction de transfert est : ")
    print("\n")
    print(sys_tf)
    print("\n")
    p = ctrl.pole(sys_tf)
    print("Les poles de la fonction de transfert: ")
    print("\n")
    print(p)  
    print("\n")
    
    y,T=step(sys_ss,linspace(0,4,1000))

    plt.figure()
    plt.plot(T.T,y.T)
    plt.xlabel('temps')
    plt.ylabel('angle moteur')
    plt.title('Courbe θ-t')
    plt.tight_layout()
    plt.grid()
    return sys_ss

MCC()

print ("Ce systeme n'est pas stable, pole p1 = 0 \n")


"""
Q5:
    Ce systeme est commandable car le déterminant de la commandabilité n'égale pas zéro
"""
print("---------------------------------------------------------")
print("\n")
print("Question 5 : \n")
Co = ctrb(A,B)
print("La commandbilité du systeme égale : \n")
print(Co)
print("\n")

det_Co = np.linalg.det(Co)
print("Déterminant de la commandabilité égale : \n")
print(det_Co)
print("\n")
print("Ce systeme est commandable")

"""
Une autre méthode pour calculer la commandabilité:
    
AB = A@B
A2B = A@AB

Co = np.hstack((B,AB,A2B))
"""




"""
Q6 et Q7 :
    
"""
print("---------------------------------------------------------")
print("\n")
print("Question 6 et 7: \n")

s = (-10,-20,-100)
K = place(A,B,s)
print("Le matrice de [k1 , k2 , k3] égale : \n")
print(K)
print("\n")

#Fonction de MCC_BF
def MCC_BF():



    
    sys_ss = ss(A-B*K,B,C-D*K,D)
    sys_tf = ss2tf(sys_ss)
    print("La fonction de transfert en boucle fermé est : ")
    print("\n")
    print(sys_tf)
    print("\n")
    p = ctrl.pole(sys_tf)
    print("Les poles de la fonction de transfert en boucle fermé : \n")
    print(p)  
    print("\n")
    print("Le systeme en boucle fermé est stable \n")
    
    y,T=step(sys_ss,linspace(0,2,1000))

    plt.figure()
    plt.plot(T.T,y.T)
    plt.xlabel('temps')
    plt.ylabel('angle moteur')
    plt.title('Courbe θ-t')
    plt.tight_layout()
    plt.grid()
    return sys_ss

MCC_BF()


"""
Q8:
    
"""
print("---------------------------------------------------------")
print("\n")
print("Question 8 : \n")


Ki = np.array([1])
K1 = np.block([K,-Ki])
print("K1 égale : \n")
print(K1)


A1 = np.block([[A-B*K,B*Ki],[-C,0]])
print("A1 égale : \n")
print(A1)
print("\n")


B1 = np.block([[np.zeros((3,1))],[1]])
print("B1 égale : \n")
print(B1)
print("\n")

C1 = np.block([C,0])
print("C1 égale : \n")
print(C1)
print("\n")


def MCC_blk():



    
    sys_blk = ss(A1,B1,C1,D)
    sys_tf = ss2tf(sys_blk)
    print("La fonction de transfert en boucle fermé est : ")
    print("\n")
    print(sys_tf)
    print("\n")
    p = ctrl.pole(sys_tf)
    print("Les poles de la fonction de transfert en block : \n")
    print(p)  
    print("\n")
    print("Le systeme en block est stable \n")
    
    y,T=step(sys_blk,linspace(0,10,1000))

    plt.figure()
    plt.plot(T.T,y.T)
    plt.xlabel('temps')
    plt.ylabel('angle moteur')
    plt.title('Courbe θ-t')
    plt.tight_layout()
    plt.grid()
    return sys_blk


MCC_blk()

"""
Q9 , Q10 et Q11
    J'ai posé que la position = 'x', la vitesse = 'x1', et l'accélération = 'x2'
    Parceque la dérivée de la position est la vitesse, et la dérivée de la vitesse 
    est l'accélération'
"""
print("---------------------------------------------------------")
print("\n")
print("Question 9, 10 et 11 : \n")

#A = np.array([[0,1],[0,0]])
#B = np.array([[0],[1]])
#C = np.array([1,0])
#D = np.array([0])

def voiture():
    A = np.array([[0,1],[0,0]])
    B = np.array([[0],[1]])
    C = np.array([1,0])
    D = np.array([0])

    sys = ss(A,B,C,D)
    sys_tf = ss2tf(sys)
    print("La fonction de transfert de la voiture est : ")
    print("\n")
    print(sys_tf)
    print("\n")
    p = ctrl.pole(sys_tf)
    print("Les poles de la fonction de transfert de la voiture : \n")
    print(p)  
    print("\n")
    print("Le systeme de la voiture n'est pas stable \n")
    
    y,T=step(sys,linspace(0,100,2000))

    plt.figure()
    plt.plot(T.T,y.T)
    plt.xlabel('Accélération de la voiture')
    plt.ylabel('La distance parcourue')
    plt.title('Voiture Accélération-Distance')
    plt.tight_layout()
    plt.grid()

voiture()




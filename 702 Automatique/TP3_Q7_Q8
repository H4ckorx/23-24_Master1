#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 22 07:49:06 2020

@author: salihabdelaziz
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 19 11:02:46 2020

@author: salihabdelaziz
"""

# Press ⌃R to execute it or replace it with your code.
# Press Double ⇧ to search everywhere for classes, files, tool windows, actions, and settings.


# TP 3 Observabilité et synthèse d'observateur
# partie 2 : synthèse d'observateur pour des systèmes linéaiers continus


import numpy as np
import os
from control.matlab import *
import matplotlib.pyplot as plt  # MATLAB plotting functions


# fonctin qui simule un système continu (à ne pas toucher)
def system(t, u):
    # Définition des matrices d'état
    A = [[0., 0., 1.], [1., -1., 2.],[-6., 0., -5.]]
    B = [[1.], [2.], [1.]]
    C = [1., 1., 1.]
    D = [0.]
    # vecteur d'état initial
    x0 = [[4.0], [-3.0], [1.0]]

    # Calcul des valeurs propres et de la matrice de passage
    valPropres, T = np.linalg.eig(A)

    # les valeurs propres de A
    lambda1 = valPropres[0]
    lambda2 = valPropres[1]
    lambda3 = valPropres[2]
    
     # La matrice diagonalisée de A
    D = [[lambda1, 0., 0.], [0., lambda2, 0.],[0., 0., lambda3]]
    
    # Calcul de la matrice exponentiel e(At)
    exp_Dt = [[np.exp(lambda1*t), 0., 0.], [0., np.exp(lambda2*t), 0.], [0., 0., np.exp(lambda3*t)]]
    
    # Ce calcul est expliqué dans le cours (slide 30) 
    exp_At = T@exp_Dt@np.linalg.inv(T)
    
    ## calcul de la solution de l'équation différentielle (slide 26)
    
    # calcul de la solution homogène (slide 25)
    xh = exp_At @ x0
    
    # calcul de la solution particulière (slide 26)
    xp = -np.linalg.inv(A)@B + exp_At @ np.linalg.inv(A) @ B 
    
    # solution complète de l'équation détat
    x = xh + xp
    
    # calcul de la sortie du système  
    y = C @ x
    
    return y

##############################################################################
# La fonction observateur à mettre ici 
def observateur(u, y, xhat) :
    A=np.array([[0,0,1],[1,-1,2],[-6,0,-5]]);
    B=np.array([[1],[2],[1]]);
    C=np.array([[1,1,1]]);
    D=np.array([0]);
    sys=ss(A,B,C,D)
  
    s=(-4,-5,-6)
    At=A.transpose()
    Ct=C.transpose()
    Lt = place(At,Ct,s) 
    L=Lt.transpose()
    print("L: ",L);
      
    Te=0.001
    sys_d=c2d(sys,Te)
    Phi = sys_d.A
    Gamma = sys_d.B
    CC = sys_d.C
    print("Phi:",Phi)
    print("Gamma:",Gamma)

    xhat2=Phi*xhat+Gamma*u+Lt*Te*(y-CC*xhat)
    return xhat2

    
    
    
if __name__ == '__main__':  
    
    # On simule le système pendant 10 s (= N*Te) 
    # N est le nombre d'échantillon
    N = 10000
    
    # définiton de la periode d'échantillonage
    Te = 0.001
    
    # vecteurs et matrices de sauvegarde 
    t = np.zeros(N)
    yy = np.zeros(N)
    xx_hat = np.zeros((3, N))
    # vecteur d'état estimée à l'instant k = 0
    
    x_hat = [[0.], [0.], [0.]]
    
    # entrée echelon
    u = 1.0
    for i in range(0, N) :
        y = system(Te*i, u)
        yy[i]=y
        t[i]=Te*i
  
   
    plt.figure(1)
    plt.plot(t,yy)
    plt.legend(['y(t)', 'y(t)_estimé'])
    plt.show()
    


     

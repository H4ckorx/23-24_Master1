# -*- coding: utf-8 -*-
"""
Created on Thu Dec  7 10:32:27 2023

@author: H4ckorx
"""

import numpy as np
import os
from control.matlab import *
import matplotlib.pyplot as plt  # MATLAB plotting functions
from math import *
import math
from scipy import integrate
import scipy as sc

def Robot(del1,del2):
    a1=0.6
    a2=0.4
    x=a1*cos(del1)+a2*cos(del1+del2)
    y=a1*sin(del1)+a2*sin(del1+del2)
    
    return (x,y)
    
def simulateur(del1,del2) :
    a1=0.6
    a2=0.4
    
    x2,y2=Robot(del1,del2)
    x0=0
    y0=0
    
    x1=a1*cos(del1)
    y1=a1*sin(del1)
    
    x_valeur=[x0,x1,x2]
    y_valeur=[y0,y1,y2]
    
    plt.plot(x_valeur,y_valeur,'r')   
    plt.plot(x2,y2,'b*')  
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    plt.title('Simulateur du robot manipulateur')
    plt.grid()
    
def Jac(del1,del2) :
    a1=0.6
    a2=0.4
    J=np.array([[-a1*sin(del1)-a2*sin(del1+del2),-a2*sin(del1+del2)], 
                [a1*cos(del1)+a2*cos(del1+del2),a2*cos(del1+del2)]])
    J1= np.linalg.inv(J)
    return J1



if __name__== '__main__' :
    
    del1=0.5
    del2=0.3
    q=np.array([[del1],[del2]])

    
    
    for i in range (1,100):
         delT=0.01
         qq=np.array([[0.5],[0.5]])

         q=q+qq*delT
         simulateur(q[0],q[1])
         
         
         
         
    xvd=np.array([[0],[-0.1]])
    q0=np.array([[0.2],[0.6]])    
    plt.figure()
    for i in range (1,100):
        delT=0.01

        

        J1=Jac(q0[0],q0[1])

        qq= J1@xvd

        q0=q0+qq*delT
        simulateur(q0[0],q0[1])
        
        
    xvd1=np.array([[-0.1],[0]])
    q1=np.array([[0.001],[-0.001]])    
    plt.figure()
    for i in range (1,1000):
        delT=0.01

        

        J2=Jac(q1[0],q1[1])

        qq1= J2@xvd1

        q1=q1+qq1*delT
        simulateur(q1[0],q1[1])











#include <GL/freeglut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <stdbool.h> // 引入布尔类型支持（Introduire le support du type booléen）
#include <time.h> // 包含 time 函数的声明（Contient la déclaration de la fonction time）
#include <stdlib.h> // 包含 srand 和 rand 函数的声明（Contient les déclarations des fonctions srand et rand）
#include <stdio.h> // 包含 sprintf 函数的声明（Contient la déclaration de la fonction sprintf）

/***********************************************************************基本参数*****************************************************************************/


// 定义游戏区域和外围区域的尺寸（Définir les dimensions de la zone de jeu et de la zone périphérique）
const int gameAreaWidth = 600;  // 游戏区域宽度（Largeur de la zone de jeu）
const int gameAreaHeight = 800; // 游戏区域高度（Hauteur de la zone de jeu）
const int borderSize = 100;     // 边界大小（Taille de la bordure）

// 总窗口尺寸（Dimensions totales de la fenêtre）
const int windowWidth = gameAreaWidth + 2 * borderSize;
const int windowHeight = gameAreaHeight + 2 * borderSize;

// 定义游戏板大小（Définir la taille du plateau de jeu）
#define ROWS 8
#define COLS 6

// 游戏板数据结构（Structure de données du plateau de jeu）
int gameBoard[ROWS][COLS] = {{0}};

// 生成新方块的间隔时间（毫秒）（Intervalle de temps pour générer un nouveau bloc (en millisecondes)）
#define GENERATE_INTERVAL 10000
// 倒计时变量，单位毫秒（Variable de compte à rebours, en millisecondes）
float countdown = 100000;

// 方块大小（Taille d'un bloc）
#define BLOCK_SIZE 92

// 定义格子间的空隙大小（Définir la taille de l'espace entre les grilles）
#define GAP_SIZE 7.5

// 初始化函数（Fonctions d'initialisation）
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // 设置背景颜色（Définir la couleur de fond）
}

// 全局变量存储游戏结束时的最大分数（Variable globale pour stocker le score maximum à la fin du jeu）
int finalMaxScore = 0;

// 游戏是否已开始（État du démarrage du jeu）
bool gameStarted = false;
bool showTimerBar = false;
bool gameOver = false;


//颜色设置（Paramètres de couleur ）
float colors[20][3] = {
    {0.8, 0.3, 0.0},    // 赭色
    {0.4, 0.8, 0.4},    // 苹果绿
    {0.2, 0.6, 0.8},    // 天蓝色
    {0.9, 0.6, 0.0},    // 橘黄色
    {0.7, 0.4, 0.8},    // 紫罗兰
    {0.0, 0.8, 0.7},    // 绿松石
    {0.9, 0.8, 0.2},    // 香槟色
    {0.8, 0.4, 0.0},    // 茶色
    {0.9, 0.7, 0.7},    // 浅粉红
    {0.3, 0.4, 0.6},    // 钢蓝
    {0.6, 0.8, 0.2},    // 酸橙色
    {0.7, 0.3, 0.1},    // 砖红色
    {0.6, 0.6, 0.7},    // 石板灰
    {0.3, 0.7, 0.9},    // 天空蓝
    {0.8, 0.1, 0.1},    // 西瓜红
    {0.1, 0.7, 0.3},    // 翡翠绿
    {0.5, 0.2, 0.7},    // 薰衣草
    {0.7, 0.9, 0.8},    // 薄荷绿
    {0.8, 0.7, 0.0},    // 芥末黄
    {0.4, 0.2, 0.1}     // 棕褐色
};


bool isDragging = false; // 是否正在拖动（Indique si un élément est en cours de glissement）
int draggedBlockX = -1;  // 被拖动方块的列（Colonne du bloc en train d'être glissé）
int draggedBlockY = -1;  // 被拖动方块的行（Ligne du bloc en train d'être glissé）
int mouseX = 0, mouseY = 0; // 鼠标的屏幕坐标（Coordonnées de la souris à l'écran）

/***************************************************************更新游戏状态******************************************************************/
/**********************************************************Mise à jour du statut du jeu******************************************************************/


/*获取最大分数（Consultation du score maximum）*/
int getMaxScore() {
    // 如果游戏结束，返回保存的最大分数（Si le jeu se termine, le score maximum sauvegardé est restitué.）
    if (gameOver) {
        return finalMaxScore;
    }


    int maxScore = 0;
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (gameBoard[i][j] > maxScore) {
                maxScore = gameBoard[i][j];
            }
        }
    }
    return maxScore;
}
/*生成新方块：向上平移（Générer de nouveaux carrés : pan up）*/
void shiftBlocksUp() {
    for (int i = ROWS-1; i >= 0; i--) {
        for (int j = 0; j < COLS; j++) {
            gameBoard[i][j] = gameBoard[i-1][j];
        }
    }
    for (int j = 0; j < COLS; j++) {
           gameBoard[0][j] = 0;
       }
}

/*生成新方块：不生成和上方数字相同的方块（Générer de nouveaux carrés : ne génère pas de carrés ayant le même numéro que celui qui le précède.）*/
int generateRandomBlock(int maxVal, int exclude) {
    int newVal;
    do {
        newVal = rand() % maxVal + 1;
    } while (newVal == exclude);
    return newVal;
}

/*生成新方块：底部生成（Générer de nouveaux carrés : génération du bas）*/
void generateNewRow() {
    // 检查最上方一排是否有方块（Vérifier la ligne supérieure pour les carrés）
	for (int j = 0; j < COLS; j++) {
	        if (gameBoard[ROWS - 1][j] != 0) {
	            gameOver = true;
	            finalMaxScore = 0;
	            for (int i = 0; i < ROWS; i++) {
	                for (int j = 0; j < COLS; j++) {
	                    if (gameBoard[i][j] > finalMaxScore) {
	                        finalMaxScore = gameBoard[i][j];
	                    }
	                }
	            }
	            return;
	        }
	    }
    // 向上移动现有方块（Déplacer les blocs existants vers le haut）
    shiftBlocksUp();

    // 获取当前最大分数（Obtenir le score maximum actuel）
    int maxScore = getMaxScore();

    // 为最下方一排生成新方块（Générer de nouveaux carrés pour la rangée inférieure）
    for (int j = 0; j < COLS; j++) {
        int exclude = (ROWS > 1) ? gameBoard[1][j] : 0;
        gameBoard[0][j] = generateRandomBlock(maxScore - 2, exclude);
    }
}


/*初始化游戏（Initialisation du jeu）*/
void initializeGame() {
    gameStarted = true;
    showTimerBar = true; // 显示进度条（Afficher la barre de progression）
    gameOver = false; // 重置游戏结束标志（Réinitialiser le drapeau de fin de jeu）
    countdown = GENERATE_INTERVAL; // 初始化倒计时（Compte à rebours d'initialisation）

    // 清空游戏板（Vider le plateau de jeu）
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            gameBoard[i][j] = 0;
        }
    }
    // 生成两排随机方块，确保上下方块数字不同（Générer deux rangées de carrés aléatoires, en veillant à ce que les carrés du haut et du bas aient des nombres différents.）
    int maxVal = 6; // 假设方块的最大值为6（ En supposant que la valeur maximale du cube est de 6）
    for (int j = 0; j < COLS; j++) {
        gameBoard[1][j] = rand() % maxVal + 1; // 为倒数第二行生成随机方块（Générer des carrés aléatoires pour l'avant-dernière ligne）
        gameBoard[0][j] = generateRandomBlock(maxVal, gameBoard[1][j]); // 为最后一行生成随机方块（Générer des carrés aléatoires pour la dernière ligne）
    }
}


/*鼠标操作（Fonctionnement de la souris）*/
void mouse(int button, int state, int x, int y) {
    int transformedY = windowHeight - y;

    if (!gameStarted) {
        if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
            // 检查是否点击了开始按钮（Vérifier si le bouton Démarrer est cliqué）
            if (x >= 300 && x <= 500 && transformedY >= 450 && transformedY <= 550) {
                gameStarted = true;
                countdown = 0;
                initializeGame();
            }
        }
    } else if (button == GLUT_LEFT_BUTTON) {
        if (state == GLUT_DOWN) {
            // 开始拖拽（Démarrer le Glisser-Déposer）
            draggedBlockX = (x - borderSize) / (BLOCK_SIZE + GAP_SIZE);
            draggedBlockY = (transformedY - borderSize) / (BLOCK_SIZE + GAP_SIZE);

            int draggedValue = gameBoard[draggedBlockY][draggedBlockX];

            // 检查是否可以拖动（如果周围有空格或者相同值的方块）（Vérifier s'il peut être déplacé (s'il y a des espaces ou des carrés de même valeur autour de lui)）
            bool canDrag = false;
            if (draggedBlockY < ROWS - 1 && (gameBoard[draggedBlockY + 1][draggedBlockX] == 0 || gameBoard[draggedBlockY + 1][draggedBlockX] == draggedValue)) {
                canDrag = true;
            }
            if (draggedBlockX > 0 && (gameBoard[draggedBlockY][draggedBlockX - 1] == 0 || gameBoard[draggedBlockY][draggedBlockX - 1] == draggedValue)) {
                canDrag = true;
            }
            if (draggedBlockX < COLS - 1 && (gameBoard[draggedBlockY][draggedBlockX + 1] == 0 || gameBoard[draggedBlockY][draggedBlockX + 1] == draggedValue)) {
                canDrag = true;
            }

            if (canDrag) {
                isDragging = true;
            }
        } else if (state == GLUT_UP && isDragging) {
            isDragging = false;

            // 计算放置的格子位置（Calculer la position de la grille placée）
            int dropX = (x - borderSize) / (BLOCK_SIZE + GAP_SIZE);
            int dropY = (transformedY - borderSize) / (BLOCK_SIZE + GAP_SIZE);

            int draggedValue = gameBoard[draggedBlockY][draggedBlockX];
            gameBoard[draggedBlockY][draggedBlockX] = 0; // 清空原位置（Vider la position d'origine）

            // 自动下落直到找到底部或者另一个方块（Descente automatique jusqu'à ce que vous trouviez le fond ou un autre carré）
            while (dropY > 0 && (gameBoard[dropY - 1][dropX] == 0 || gameBoard[dropY - 1][dropX] == draggedValue)) {
                dropY--;
            }

            // 合并或放置方块（Fusionner ou placer des blocs）
            if (gameBoard[dropY][dropX] == draggedValue) {
                gameBoard[dropY][dropX]++; // 合并方块（fusionner les carrés）
            } else if (gameBoard[dropY][dropX] == 0) {
                gameBoard[dropY][dropX] = draggedValue; // 放置方块（cube de chute）
            } else {
                // 恢复原位置的方块（如果目标位置不为空，且不与拖动的方块值相同）
            	// Rétablir le carré dans sa position d'origine (si la position cible n'est pas vide et n'a pas la même valeur que le carré déplacé
                gameBoard[draggedBlockY][draggedBlockX] = draggedValue;
            }

            // 重置拖动状态(Réinitialisation de l'état de la glissière)
            draggedBlockX = -1;
            draggedBlockY = -1;
        }
    }
    if (gameOver && button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
            // 计算按钮的区域(Calculer la surface du bouton)
            float buttonWidth = 200;
            float buttonHeight = 50;
            float buttonX = windowWidth / 2 - buttonWidth / 2;
            float buttonY = windowHeight / 2 - 100;

            // 检查点击是否在按钮区域内(Vérifier si le clic se situe à l'intérieur de la zone du bouton)
            if (x >= buttonX && x <= (buttonX + buttonWidth) &&
                windowHeight - y >= buttonY && windowHeight - y <= (buttonY + buttonHeight)) {
                // 重置游戏状态(Réinitialisation de l'état du jeu)
                initializeGame();
            }
        }
}












void motion(int x, int y) {
    mouseX = x;
    mouseY = windowHeight - y; // 转换 y 坐标( Conversion de la coordonnée y)
    glutPostRedisplay(); // 请求重绘(demander un nouveau dessin)
    printf("Mouse Position: (%d, %d)\n", mouseX, mouseY);
}


/*键盘操作(Fonctionnement du clavier)*/
void keyboard(unsigned char key, int x, int y) {
    if (key == 27) { // 按 ESC 退出(Appuyez sur ESC pour quitter)
        exit(0);
    }
}

/*更新游戏状态(Mise à jour du statut du jeu)*/
void updateGame() {
    // 检查顶部是否有方块(Vérifier la présence de carrés dans la partie supérieure)
    for (int j = 0; j < COLS; j++) {
        if (gameBoard[0][j] != 0) {
            // 游戏结束逻辑(Logique du Game Over)
            break;
        }
    }

    glutPostRedisplay();
}






/************************************************************************游戏规则*******************************************************************/
/**********************************************************************règles du jeu*******************************************************************/


void mergeVerticalBlocks() {
    for (int col = 0; col < COLS; col++) {
        for (int row = ROWS - 1; row > 0; row--) { // 从底部开始向上检查(En commençant par le bas et en vérifiant vers le haut)
            if (gameBoard[row][col] != 0 && gameBoard[row][col] == gameBoard[row - 1][col]) {
                // 合并方块（fusionner les carrés）
                gameBoard[row][col]++;
                gameBoard[row - 1][col] = 0;

                // 合并后，上方方块可能会导致新的合并，继续检查（Après la fusion, le carré du haut peut provoquer une nouvelle fusion.）
                for (int checkRow = row - 1; checkRow > 0; checkRow--) {
                    if (gameBoard[checkRow][col] == gameBoard[checkRow - 1][col]) {
                        gameBoard[checkRow][col]++;
                        gameBoard[checkRow - 1][col] = 0;
                    } else {
                        break; // 不需要进一步检查（Aucun autre examen n'est nécessaire）
                    }
                }
            }
        }
    }
}

void riseBlocksIfEmptyAbove(int gameBoard[ROWS][COLS]) {
    // 从第二行开始向上遍历（最底行无需检查）
	//Traverser vers le haut à partir de la deuxième rangée (il n'est pas nécessaire de vérifier la rangée inférieure).
    for (int i = 1; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            // 当前位置有方块下方为空时(Lorsqu'il y a des carrés vides sous la position actuelle)
            while (gameBoard[i][j] != 0 && gameBoard[i - 1][j] == 0) {
                // 将方块下移（Déplacez le carré vers le bas.）
                gameBoard[i - 1][j] = gameBoard[i][j];
                gameBoard[i][j] = 0;

                // 继续检查上一行，直到遇到非空位置或到达底部
                //Continuez à vérifier la ligne précédente jusqu'à ce que vous rencontriez une position non vide ou que vous atteigniez le bas de la page.
                if (i > 1) {
                    i--;
                } else {
                    break; // 到达底部(Au fond)
                }
            }
        }
    }
}







/****************************************************************************计数器代码******************************************************************/




//方块刷新计时器(Minuterie de rafraîchissement du cube)
void onTimer(int value) {
    if (!gameStarted) {
    	 countdown = 0;
    	 glutTimerFunc(10000, onTimer, 0);
        return; // 如果游戏未开始，直接返回(Si le jeu n'a pas commencé, retournez directement à)
    }
        countdown -= 10000; // 减少倒计时( Réduction du compte à rebours)

        if (countdown <= 0) {
            generateNewRow();  // 生成新的一行方块(Générer une nouvelle rangée de carrés)
            updateGame();      // 更新游戏状态(Mise à jour du statut du jeu)
            countdown = GENERATE_INTERVAL; // 重置倒计时(Réinitialiser le compte à rebours)
        }

        glutPostRedisplay();

        glutTimerFunc(10000, onTimer, 0);
}


//进度条计时器(Barre de progression du timer)
void updateTimerBar(int value) {
    if (!gameStarted) {
    	countdown = 0;
    	glutTimerFunc(20, updateTimerBar, 0);
        return; // 如果游戏未开始，直接返回(Si le jeu n'a pas commencé, retourne immédiatement)
    }
    countdown -= 20;
    if (countdown <= 0) {
        countdown = GENERATE_INTERVAL; // 重置倒计时(Réinitialiser le compte à rebours)
    }

    glutPostRedisplay();

    glutTimerFunc(20, updateTimerBar, 0); // 每20毫秒调用一次更新进度条(Appeler la mise à jour de la barre de progression toutes les 20 millisecondes)
}


/***********************************************************************绘制代码**************************************************************************/
/***********************************************************************Code de dessin**************************************************************************/


/*绘制方块(dessiner un carré)*/

void drawSquare(float x, float y, float size) {
    glBegin(GL_QUADS);
        glVertex2f(x, y);
        glVertex2f(x + size, y);
        glVertex2f(x + size, y + size);
        glVertex2f(x, y + size);
    glEnd();
}

/*绘制文本(Dessiner un texte)*/
void drawText(const char *text, float x, float y) {
    glRasterPos2f(x, y);
    for (const char *c = text; *c != '\0'; c++) {
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *c);
    }
}

/*绘制被拖拽的方块(Tracer des carrés tirés au cordeau)*/
void drawBlockAtScreenPosition(int value, int screenX, int screenY) {
    float x = screenX - BLOCK_SIZE / 2.0f;
    float y = screenY - BLOCK_SIZE / 2.0f;

    if (value > 0 && value <= 20) {
        glColor3f(colors[value-1][0], colors[value-1][1], colors[value-1][2]);
    } else {
        glColor3f(0.5, 0.5, 0.5); // 默认颜色(Couleur par défaut)
    }

    drawSquare(x, y, BLOCK_SIZE);

    // 设置文本颜色（例如黑色）
    //Réglage de la couleur du texte (par exemple, noir)
    glColor3f(0.0, 0.0, 0.0);
    char numStr[3];
    sprintf(numStr, "%d", value);
    drawText(numStr, x + (BLOCK_SIZE / 2.2), y + (BLOCK_SIZE / 2.2));
}



/*绘制开始按钮(Dessiner le bouton de démarrage)*/
void drawStartButton() {
    // 绘制按钮( Dessiner des boutons)
    glColor3f(0.968627f, 0.862745f, 0.435294f); // 奶油白色按钮
    glBegin(GL_QUADS);
        glVertex2f(300, 450);
        glVertex2f(500, 450);
        glVertex2f(500, 550);
        glVertex2f(300, 550);
    glEnd();

    // 设置文字颜色并绘制开始游戏按钮上的文字(Définir la couleur du texte et dessiner le texte sur le bouton Démarrer le jeu)
    glColor3f(0.490196f, 0.235294f, 0.596078f); // 富有的紫色文本(Texte riche en violet)
    drawText("Commencer", 345, 485); // 假设文本在按钮中间(En supposant que le texte se trouve au milieu du bouton)

    // 设置深灰色并在按钮上方绘制游戏说明(Définir la couleur gris foncé et dessiner la description du jeu au-dessus du bouton.)
    glColor3f(0.3f, 0.3f, 0.3f); // 深灰色文本(Texte gris foncé)
    drawText("Welcome to Twenty!", 300, 700); // 标题(légende)
    drawText("To play, pick up tiles and drop them onto tiles", 200, 620); // 说明第一部分(Partie I de la note)
    drawText("with the same value", 300, 560); // 说明第二部分(Partie II de la note)
}

/*绘制重新开始按钮(Dessiner le bouton de redémarrage)*/
void drawRestartButton() {
    glColor3f(0.5, 0.8, 0.5); // 设置按钮颜色(Réglage de la couleur des boutons)
    float buttonWidth = 200;
    float buttonHeight = 50;
    float buttonX = windowWidth / 2 - buttonWidth / 2;
    float buttonY = windowHeight / 2 - 100;

    glBegin(GL_QUADS);
        glVertex2f(buttonX, buttonY);
        glVertex2f(buttonX + buttonWidth, buttonY);
        glVertex2f(buttonX + buttonWidth, buttonY + buttonHeight);
        glVertex2f(buttonX, buttonY + buttonHeight);
    glEnd();

    glColor3f(0.0, 0.0, 0.0); // 黑色文字(lettre noire)
    drawText("Restart", buttonX + 70, buttonY + 15);
}

/*绘制方块逻辑(Dessin Cube Logique)*/
void drawBlock(int value, int row, int col) {
    // 考虑空隙，重新计算 x 和 y 坐标(Recalculer les coordonnées x et y en tenant compte des lacunes.)
    float x = borderSize + col * (BLOCK_SIZE + GAP_SIZE) + GAP_SIZE / 2.0f;
    float y = borderSize + row * (BLOCK_SIZE + GAP_SIZE) + GAP_SIZE / 2.0f;

    // 根据方块的值选择颜色(Choisir la couleur en fonction de la valeur du carré)
    if (value > 0 && value <= 20) {
        glColor3f(colors[value-1][0], colors[value-1][1], colors[value-1][2]);
    } else {
        glColor3f(0.5, 0.5, 0.5); // 默认颜色(Couleur par défaut)
    }

    drawSquare(x, y, BLOCK_SIZE); // 绘制方块(dessiner un carré (c'est-à-dire des blocs de traçage))

    // 设置文本颜色（例如黑色）(Réglage de la couleur du texte (par exemple, noir))
    glColor3f(0.0, 0.0, 0.0);

    // 将数字转换为字符串(Conversion de nombres en chaînes de caractères)
    char numStr[3];
    sprintf(numStr, "%d", value);

    // 调整文本位置，使其居中显示在方块上(Ajuster la position du texte pour qu'il soit centré sur le carré)
    drawText(numStr, x + (BLOCK_SIZE / 2.2), y + (BLOCK_SIZE / 2.2));
}

/*进度条绘制(Dessin de la barre de progression)*/
void drawTimerBar() {
    if (!showTimerBar) return; // 如果不显示进度条，则直接返回(Si showTimerBar = false , elle est renvoyée directement)

    float barWidth = (countdown / GENERATE_INTERVAL) * windowWidth;
    glColor3f(1.0f, 0.0f, 0.0f); // 红色时间条(barre de temps rouge)
    glBegin(GL_QUADS);
        glVertex2f(windowWidth - barWidth, windowHeight - 20);
        glVertex2f(windowWidth, windowHeight - 20);
        glVertex2f(windowWidth, windowHeight - 30);
        glVertex2f(windowWidth - barWidth, windowHeight - 30);
    glEnd();
}




/*绘制游戏画面逻辑(Dessiner la logique d'un écran de jeu)*/
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // 设置正投影(Réglage de la projection orthographique)
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, windowWidth, 0.0, windowHeight);

    // 绘制外围区域背景(Dessiner l'arrière-plan de la zone périphérique)
    glColor3f(1.0, 1.0, 1.0); // 白色背景(fond blanc)
    glBegin(GL_QUADS);
        glVertex2f(0, 0);
        glVertex2f(windowWidth, 0);
        glVertex2f(windowWidth, windowHeight);
        glVertex2f(0, windowHeight);
    glEnd();

    // 绘制游戏区域背景(Dessiner l'arrière-plan de la zone de jeu)
    glColor3f(0.8, 0.8, 0.8); // 灰色背景(Fond gris)
    glBegin(GL_QUADS);
        glVertex2f(borderSize, borderSize);
        glVertex2f(borderSize + gameAreaWidth, borderSize);
        glVertex2f(borderSize + gameAreaWidth, borderSize + gameAreaHeight);
        glVertex2f(borderSize, borderSize + gameAreaHeight);
    glEnd();

    // 如果游戏结束(Si le jeu se termine)
    if (gameOver) {
        glColor3f(1.0, 0.0, 0.0); // 设置红色文本(Définition du texte en rouge)
        drawText("Game Over", windowWidth / 2 - 50, windowHeight / 2 + 20); // 居中显示游戏结束信息(Message centré sur le jeu)

        char scoreStr[20];
        sprintf(scoreStr, "Final Score: %d", finalMaxScore);
        drawText(scoreStr, windowWidth / 2 - 60, windowHeight / 2 - 20); // 显示最终得分(Afficher le score final)

        drawRestartButton();

    } else {
        // 在游戏进行中的绘制逻辑(Dessiner la logique au fur et à mesure que le jeu progresse)
        mergeVerticalBlocks();
        riseBlocksIfEmptyAbove(gameBoard);

        if (!gameStarted) {
            drawStartButton();
        } else {
            // 绘制游戏板上的方块和数字(Dessiner des carrés et des chiffres sur le plateau de jeu)
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++) {
                    if (gameBoard[i][j] != 0) {
                        drawBlock(gameBoard[i][j], i, j);
                    }
                }
            }

            // 如果正在拖动方块，则绘制被拖动的方块(Si un carré est déplacé, le carré déplacé est dessiné)
            if (isDragging) {
                int blockValue = gameBoard[draggedBlockY][draggedBlockX];
                drawBlockAtScreenPosition(blockValue, mouseX, mouseY);
            }
        }

        if (gameStarted) {
            // 获取最大分数(Obtenir le score maximum)
            int maxScore = getMaxScore();

            // 将分数转换为字符串(Conversion des partitions en chaînes de caractères)
            char scoreStr[20];
            sprintf(scoreStr, "Score: %d", maxScore);

            // 设置文本颜色(Réglage de la couleur du texte)
            glColor3f(1.0, 0.0, 1.0);

            // 绘制分数文本(Tracé d'un texte de fractions)
            int textLength = strlen(scoreStr) * 10;
            drawText(scoreStr, windowWidth - textLength - 20, windowHeight - 50); // 在窗口右上角绘制文本(Dessiner du texte dans le coin supérieur droit de la fenêtre)
        }

        // 绘制时间条(Dessiner la barre de temps)
        drawTimerBar();
    }

    glFlush();
    glutSwapBuffers();
}








/***************************************************************************main*******************************************************************/







// 主函数(fonction principale)
int main(int argc, char** argv) {
	srand(time(NULL));

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(windowWidth, windowHeight);
    glutCreateWindow("Twenty Game");

    init(); // 初始化设置( Paramètres d'initialisation)


    // 注册回调函数(Enregistrement des fonctions de rappel)
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutMotionFunc(motion);
    glutKeyboardFunc(keyboard);
    glutIdleFunc(updateGame);

    // 设置定时器(Réglage de la minuterie)
    glutTimerFunc(10000, onTimer, 0); // 传递10s作为间隔时间参数(Passer 10s comme paramètre d'intervalle)

    // 设置进度条更新的定时器(Réglage de la minuterie pour les mises à jour de la barre de progression)
    glutTimerFunc(20, updateTimerBar, 0); // 每20毫秒调用一次updateTimerBar(Appelle updateTimerBar toutes les 20 millisecondes.)

    glutMainLoop();
    return 0;
}

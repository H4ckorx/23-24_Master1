import numpy as np
import matplotlib.pyplot as plt

# 对应PDF文件中的2.4节: 非因果性低通滤波器
def filtre_exponentiel_non_causal(entree, alpha):
    sortie = np.zeros_like(entree)
    
    # 正向滤波
    for i in range(1, len(entree)):
        sortie[i] = alpha * entree[i] + (1 - alpha) * sortie[i - 1]

    # 反向滤波
    for i in range(len(entree) - 2, -1, -1):
        sortie[i] = alpha * sortie[i] + (1 - alpha) * sortie[i + 1]

    return sortie

# 初始化参数
delta_t = 0.01
nombre_echantillons = 1000
temps = np.arange(0, nombre_echantillons) * delta_t

# 生成信号
signal = 1.9 * np.sin(5 * temps) + 1.5 * np.sin(11 * temps) + 1.7 * np.sin(2.3 * temps)
signal += np.sqrt(0.3) * np.random.randn(np.size(temps))

# 应用非因果性滤波器
signal_filtre_non_causal = filtre_exponentiel_non_causal(signal, 0.4)

# 绘图展示
plt.figure(figsize=(12, 6))
plt.plot(temps, signal, label='Original Signal')
plt.plot(temps, signal_filtre_non_causal, label='Non-causal Filtered Signal', color='red')
plt.legend()
plt.show()

# -----------------------------------------------------------------------

# 对应PDF文件中的3.1节和3.2节: 绘制三个基本函数的图像
import matplotlib.pyplot as plt

t = np.arange(0, 100, 0.1)
x = np.sin(np.pi * t)
y = np.sinc(np.pi * t)
z = np.cos(np.pi * t)

plt.figure()
plt.plot(t, x, label='sin(t)')
plt.plot(t, y, label='sinc(t)')
plt.plot(t, z, label='cos(t)')
plt.title('Function Plots')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.show()

# -----------------------------------------------------------------------

# 对应PDF文件中的3.1节和3.2节: 设置图形大小并添加标题
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.figure(figsize=(2, 2))  # 设置图形大小
plt.plot(x, y)
plt.title("Small Plot")  # 设置标题
plt.show()

# -----------------------------------------------------------------------

# 对应PDF文件中的3.4节: 绘制3D图形
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# 创建数据
X = np.linspace(-5, 5, 100)
Y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(X, Y)
Z = np.sin(np.sqrt(X**2 + Y**2))

# 绘制图形
ax.plot_surface(X, Y, Z, cmap='viridis')

plt.show()

# -----------------------------------------------------------------------

# 对应PDF文件中的5.1节: 线性回归数据散点图
a = 2
b = -3
x = np.random.randn(1200) * 10
y = a * x + b + np.random.randn(np.size(x)) * 5

plt.figure()
plt.plot(x, y, '.')
plt.axis('equal')
plt.show()

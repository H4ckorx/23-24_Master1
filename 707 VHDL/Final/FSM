library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;


entity FSM is
    Port ( E : in std_logic_vector (3 downto 0);
           clr : in std_logic;
           clk : in std_logic;
           S : out STD_LOGIC
           
           );
end FSM;

architecture Behavioral of FSM is
type state_type is (prem,deux,trois,quat);
signal current_state,next_state : state_type;

signal S_1 : std_logic;
begin
p1 : process(clk)
begin
    if rising_edge (clk)then
    current_state <= next_state;
    end if;
end process;

p2 : process(current_state,next_state,clr)
begin
    if clr = '1'then
        next_state <= prem;
    end if;
    case current_state is
        when prem =>
            if E = "0110"then
                next_state <= deux;
            end if;
        when deux =>
            if E = "1001"then
                next_state <= trois;
            else
                next_state <= prem;
            end if;
        when trois =>
            if E = "1100"then
                next_state <= quat;
            else
                next_state <= prem;
            end if;
        when quat =>
            if E = "0011"then
                next_state <= prem;
            else
                next_state <= prem;
            end if;
    end case;
    

end process;
p3 : process(current_state)
begin
    if current_state = quat then
        S_1 <= '1';
    else
        S_1 <= '0';
    end if;
end process;   
S <= S_1;        



end Behavioral;

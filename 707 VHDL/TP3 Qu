LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;
entity feux is
    Port ( ReqV : in STD_LOGIC;
           start : in STD_LOGIC;
           clk : in STD_LOGIC;
           RH : out STD_LOGIC;
           YH : out STD_LOGIC;
           ReqH : in STD_LOGIC;
           VH : out STD_LOGIC;
           RV : out STD_LOGIC;
           YV : out STD_LOGIC;
           VV : out STD_LOGIC);
end feux;

architecture Behavioral of feux is
    type state is (A, B, C, D, G);
    signal present_state, next_state : state;
    signal cpt : STD_LOGIC_VECTOR (3 downto 0) := "0000";

begin
    process(ReqV, ReqH, present_state, cpt, start)
    begin
        case present_state is
            when G =>
                RH <= '0'; YH <= '0'; VH <= '0'; RV <= '0'; YV <= '0'; VV <= '0';
                if start = '1' then
                    next_state <= A;
                else
                    next_state <= G;
                end if;
            when A =>
                RH <= '0'; YH <= '0'; VH <= '1'; RV <= '1'; YV <= '0'; VV <= '0';
                if ReqV = '1' then 
                    if cpt = "0011" then
                        next_state <= B;
                    end if;
                else 
                    if cpt = "1110" then
                        next_state <= B;
                    end if;
                end if;
            when B =>
                RH <= '0'; YH <= '1'; VH <= '0'; RV <= '1'; YV <= '0'; VV <= '0';
                if cpt = "0010" then
                    next_state <= C;
                end if;
            when C =>
                RH <= '1'; YH <= '0'; VH <= '0'; RV <= '0'; YV <= '0'; VV <= '1';
                if ReqH = '1' then 
                    if cpt = "0011" then
                        next_state <= D;
                    end if;
                else 
                    if cpt = "1110" then
                        next_state <= D;
                    end if;
                end if; 
            when D =>
                RH <= '1'; YH <= '0'; VH <= '0'; RV <= '0'; YV <= '1'; VV <= '0';
                if cpt = "0010" then
                    next_state <= G; 
                end if;
        end case;
    end process;

    process (clk)
    begin
        if rising_edge(clk) then
            present_state <= next_state;
            if present_state /= next_state then
                cpt <= "0000";
            else
                cpt <= cpt + "0001";
            end if;
        end if;
    end process; 

end Behavioral;

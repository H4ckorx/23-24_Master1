import rclpy
from rclpy.node import Node
from custom_messages.msg import RefPosition
from custom_messages.msg import CartesianState
from .position_interpolation.position_interpolation import PositionInterpolation
import numpy as np

class TrajectoryGenerator(Node):
    def __init__(self):
        super().__init__('trajectory_generator')
        self.publisher_ = self.create_publisher(CartesianState, 'desired_state', 10)
        self.subscription = self.create_subscription(
            RefPosition,
            'ref_position',
            self.listener_callback,
            10)
        self.subscription
        self.initialized        = False
        self.running            = False
        self.pi                 = np.zeros(2)
        self.pf                 = np.zeros(2)
        self.sampling_period    = 1e-2

    def listener_callback(self, ref_position):
        self.t                  = 0
        if self.initialized == False:
            self.timer          = self.create_timer(self.sampling_period, self.timer_callback)
            self.initialized    = True
            self.pi             = np.array([ref_position.x,ref_position.y])
            self.pf             = self.pi
        else:
            self.running        = True
            self.pi             = self.pf
            self.pf             = np.array([ref_position.x,ref_position.y])
            self.pos_interp     = PositionInterpolation(self.pi,self.pf,ref_position.deltat)

    def timer_callback(self):
        self.t                  = self.t + self.sampling_period
        desired_state           = CartesianState()
        if self.running:
            p                   = self.pos_interp.p(self.t)
            pdot                = self.pos_interp.pdot(self.t)
            desired_state.x     = p[0]
            desired_state.y     = p[1]
            desired_state.xdot  = pdot[0]
            desired_state.ydot  = pdot[1]
        else:
            desired_state.x     = self.pi[0]
            desired_state.y     = self.pi[1]        
            desired_state.xdot  = 0.0
            desired_state.ydot  = 0.0
        self.publisher_.publish(desired_state)

    

def main(args=None):
    rclpy.init(args=args)
    trajectory_generator = TrajectoryGenerator()
    rclpy.spin(trajectory_generator)
    trajectory_generator.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
